/*
Deployment script for HCorp.MediApp

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HCorp.MediApp"
:setvar DefaultFilePrefix "HCorp.MediApp"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER2014E\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER2014E\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [Access]...';


GO
CREATE SCHEMA [Access]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Core]...';


GO
CREATE SCHEMA [Core]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Entity]...';


GO
CREATE SCHEMA [Entity]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Access].[Roles]...';


GO
CREATE TABLE [Access].[Roles] (
    [Role]        NVARCHAR (25)    NOT NULL,
    [SectionId]   UNIQUEIDENTIFIER NOT NULL,
    [Description] NVARCHAR (256)   NULL,
    CONSTRAINT [PK_AccessRoles_Role] PRIMARY KEY NONCLUSTERED ([Role] ASC)
);


GO
PRINT N'Creating [Access].[User]...';


GO
CREATE TABLE [Access].[User] (
    [UserId]                UNIQUEIDENTIFIER NOT NULL,
    [Username]              NVARCHAR (256)   NOT NULL,
    [Password]              NVARCHAR (128)   NOT NULL,
    [PasswordFormat]        INT              NOT NULL,
    [PasswordHashAlgorithm] INT              NOT NULL,
    [PasswordSalt]          NVARCHAR (128)   NULL,
    [Permissions]           NTEXT            NULL,
    CONSTRAINT [PK_AccessUser_UserId] PRIMARY KEY CLUSTERED ([UserId] ASC),
    CONSTRAINT [UQ_AccessUser_Username] UNIQUE NONCLUSTERED ([Username] ASC)
);


GO
PRINT N'Creating [Core].[Entity]...';


GO
CREATE TABLE [Core].[Entity] (
    [EntityId]    UNIQUEIDENTIFIER NOT NULL,
    [Name]        NVARCHAR (256)   NOT NULL,
    [Url]         NVARCHAR (256)   NOT NULL,
    [Avatar]      NTEXT            NOT NULL,
    [Description] NVARCHAR (MAX)   NOT NULL,
    [Type]        NVARCHAR (20)    NOT NULL,
    [Culture]     NVARCHAR (5)     NOT NULL,
    [StatusId]    NVARCHAR (20)    NOT NULL,
    CONSTRAINT [PK_CoreEntity_EntityId] PRIMARY KEY CLUSTERED ([EntityId] ASC),
    CONSTRAINT [UQ_CoreEntity_EntityId_Type] UNIQUE NONCLUSTERED ([EntityId] ASC, [Type] ASC),
    CONSTRAINT [UQ_CoreEntity_Url] UNIQUE NONCLUSTERED ([Url] ASC)
);


GO
PRINT N'Creating [Core].[StatusDetails]...';


GO
CREATE TABLE [Core].[StatusDetails] (
    [StatusId]    NVARCHAR (20) NOT NULL,
    [Type]        NVARCHAR (20) NOT NULL,
    [Culture]     NVARCHAR (5)  NOT NULL,
    [Name]        NVARCHAR (20) NOT NULL,
    [Description] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_StatusDetails_StatusId_Type_Culture] PRIMARY KEY CLUSTERED ([StatusId] ASC, [Type] ASC, [Culture] ASC)
);


GO
PRINT N'Creating [Core].[Culture]...';


GO
CREATE TABLE [Core].[Culture] (
    [Culture]  NVARCHAR (5) NOT NULL,
    [IsActive] BIT          NOT NULL,
    CONSTRAINT [PK_CoreCulture_Culture] PRIMARY KEY CLUSTERED ([Culture] ASC)
);


GO
PRINT N'Creating [Core].[Status]...';


GO
CREATE TABLE [Core].[Status] (
    [StatusId] NVARCHAR (20) NOT NULL,
    [Type]     NVARCHAR (20) NOT NULL,
    CONSTRAINT [PK_CoreStatus_StatusId_Type] PRIMARY KEY CLUSTERED ([StatusId] ASC, [Type] ASC)
);


GO
PRINT N'Creating [Entity].[TypeDetails]...';


GO
CREATE TABLE [Entity].[TypeDetails] (
    [Type]        NVARCHAR (20) NOT NULL,
    [Culture]     NVARCHAR (5)  NOT NULL,
    [Name]        NVARCHAR (20) NOT NULL,
    [Description] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_EntityTypeDetails_Type_Culture] PRIMARY KEY CLUSTERED ([Type] ASC, [Culture] ASC)
);


GO
PRINT N'Creating [Entity].[Type]...';


GO
CREATE TABLE [Entity].[Type] (
    [Group] NVARCHAR (20) NOT NULL,
    [Type]  NVARCHAR (20) NOT NULL,
    CONSTRAINT [PK_EntityType_Type] PRIMARY KEY CLUSTERED ([Type] ASC)
);


GO
PRINT N'Creating [Entity].[Link]...';


GO
CREATE TABLE [Entity].[Link] (
    [EntityId]       UNIQUEIDENTIFIER NOT NULL,
    [ParentEntityId] UNIQUEIDENTIFIER NOT NULL,
    [Category]       NVARCHAR (20)    NOT NULL,
    [StatusId]       NVARCHAR (20)    NOT NULL,
    [Type]           NVARCHAR (20)    NOT NULL,
    [Level]          INT              NOT NULL,
    CONSTRAINT [PK_EntityLink_EntityId_ParentEntityId] PRIMARY KEY CLUSTERED ([EntityId] ASC, [ParentEntityId] ASC)
);


GO
PRINT N'Creating [Access].[DF_AccessUser_PasswordFormat]...';


GO
ALTER TABLE [Access].[User]
    ADD CONSTRAINT [DF_AccessUser_PasswordFormat] DEFAULT (0) FOR [PasswordFormat];


GO
PRINT N'Creating [Access].[DF_AccessUser_PasswordHashAlgorith]...';


GO
ALTER TABLE [Access].[User]
    ADD CONSTRAINT [DF_AccessUser_PasswordHashAlgorith] DEFAULT (0) FOR [PasswordHashAlgorithm];


GO
PRINT N'Creating [Core].[DF_CoreEntity_StatusId]...';


GO
ALTER TABLE [Core].[Entity]
    ADD CONSTRAINT [DF_CoreEntity_StatusId] DEFAULT 'HOLD' FOR [StatusId];


GO
PRINT N'Creating [Core].[DF_CoreStatus_IsActive]...';


GO
ALTER TABLE [Core].[Culture]
    ADD CONSTRAINT [DF_CoreStatus_IsActive] DEFAULT (0) FOR [IsActive];


GO
PRINT N'Creating [Entity].[DF_EntityLink_StatusId]...';


GO
ALTER TABLE [Entity].[Link]
    ADD CONSTRAINT [DF_EntityLink_StatusId] DEFAULT 'HOLD' FOR [StatusId];


GO
PRINT N'Creating [Entity].[DF_EntityLink_Level]...';


GO
ALTER TABLE [Entity].[Link]
    ADD CONSTRAINT [DF_EntityLink_Level] DEFAULT 1 FOR [Level];


GO
PRINT N'Creating [Access].[FK_AccessRoles_SectionId]...';


GO
ALTER TABLE [Access].[Roles]
    ADD CONSTRAINT [FK_AccessRoles_SectionId] FOREIGN KEY ([SectionId]) REFERENCES [Core].[Entity] ([EntityId]);


GO
PRINT N'Creating [Access].[FK_AccessUser_UserId]...';


GO
ALTER TABLE [Access].[User]
    ADD CONSTRAINT [FK_AccessUser_UserId] FOREIGN KEY ([UserId]) REFERENCES [Core].[Entity] ([EntityId]);


GO
PRINT N'Creating [Core].[FK_CoreEntity_StatusId_Type]...';


GO
ALTER TABLE [Core].[Entity]
    ADD CONSTRAINT [FK_CoreEntity_StatusId_Type] FOREIGN KEY ([StatusId], [Type]) REFERENCES [Core].[Status] ([StatusId], [Type]);


GO
PRINT N'Creating [Core].[FK_CoreEntity_Culture]...';


GO
ALTER TABLE [Core].[Entity]
    ADD CONSTRAINT [FK_CoreEntity_Culture] FOREIGN KEY ([Culture]) REFERENCES [Core].[Culture] ([Culture]);


GO
PRINT N'Creating [Core].[FK_StatusDetails_StatusId_Type]...';


GO
ALTER TABLE [Core].[StatusDetails]
    ADD CONSTRAINT [FK_StatusDetails_StatusId_Type] FOREIGN KEY ([StatusId], [Type]) REFERENCES [Core].[Status] ([StatusId], [Type]);


GO
PRINT N'Creating [Core].[FK_StatusDetails_Culture]...';


GO
ALTER TABLE [Core].[StatusDetails]
    ADD CONSTRAINT [FK_StatusDetails_Culture] FOREIGN KEY ([Culture]) REFERENCES [Core].[Culture] ([Culture]);


GO
PRINT N'Creating [Core].[FK_CoreStatus_Type]...';


GO
ALTER TABLE [Core].[Status]
    ADD CONSTRAINT [FK_CoreStatus_Type] FOREIGN KEY ([Type]) REFERENCES [Entity].[Type] ([Type]);


GO
PRINT N'Creating [Entity].[FK_EntityTypeDetails_Type]...';


GO
ALTER TABLE [Entity].[TypeDetails]
    ADD CONSTRAINT [FK_EntityTypeDetails_Type] FOREIGN KEY ([Type]) REFERENCES [Entity].[Type] ([Type]);


GO
PRINT N'Creating [Entity].[FK_EntityTypeDetails_Culture]...';


GO
ALTER TABLE [Entity].[TypeDetails]
    ADD CONSTRAINT [FK_EntityTypeDetails_Culture] FOREIGN KEY ([Culture]) REFERENCES [Core].[Culture] ([Culture]);


GO
PRINT N'Creating [Entity].[FK_EntityLink_EntityId]...';


GO
ALTER TABLE [Entity].[Link]
    ADD CONSTRAINT [FK_EntityLink_EntityId] FOREIGN KEY ([EntityId]) REFERENCES [Core].[Entity] ([EntityId]);


GO
PRINT N'Creating [Entity].[FK_EntityLink_ParentEntityId]...';


GO
ALTER TABLE [Entity].[Link]
    ADD CONSTRAINT [FK_EntityLink_ParentEntityId] FOREIGN KEY ([ParentEntityId]) REFERENCES [Core].[Entity] ([EntityId]);


GO
PRINT N'Creating [Entity].[FK_EntityLink_StatusId_Type]...';


GO
ALTER TABLE [Entity].[Link]
    ADD CONSTRAINT [FK_EntityLink_StatusId_Type] FOREIGN KEY ([StatusId], [Type]) REFERENCES [Core].[Status] ([StatusId], [Type]);


GO
PRINT N'Creating [Access].[GetUser]...';


GO
CREATE PROCEDURE [Access].[GetUser]
	@UserId		UNIQUEIDENTIFIER,
	@Username	[NVARCHAR](256),
	
	@Page				INT = 1,
	@PageSize			INT = 10000
AS        
BEGIN
	SELECT 
		[E].[EntityId][UserId]
		,[E].[Name]
		,[E].[Url]
		,[E].[Avatar]
		,[E].[Description]
		,[E].[Type]
		,[E].[Culture]

		,[SD].[StatusId]
		,[SD].[Name] [StatusName]
		,[SD].[Description] [StatusDescription]

		,[U].[Username]
		,[U].[Password]
		,[U].[PasswordFormat]
		,[U].[PasswordHashAlgorithm]
		,[U].[PasswordSalt]
		,[U].[Permissions]
	FROM [Access].[User] [U]
		INNER JOIN [Core].[Entity] [E]
			ON [UserId] = ISNULL(@UserId, [UserId]) 
				AND [Username] = ISNULL(@Username, [Username])
				AND [U].[UserId] = [E].[EntityId]
		INNER JOIN [Core].[StatusDetails] [SD]
			ON [SD].[StatusId] = [E].[StatusId]
				AND [SD].[Type] = [E].[Type]
				AND [SD].[Culture] = [E].[Culture]
	ORDER BY [Username]
	OFFSET ((@Page - 1) * @PageSize) ROWS
	FETCH NEXT @PageSize ROWS ONLY;
	
	IF (@@ROWCOUNT = 0) -- User not found
       RETURN -1

    RETURN 0
END
GO
PRINT N'Creating [Access].[SetUser]...';


GO
CREATE PROCEDURE [Access].[SetUser]
    @UserId			UNIQUEIDENTIFIER,

    @Name			NVARCHAR(256),
    @Url		    NVARCHAR(256),
    @Description	NVARCHAR(MAX),

    @Type			NVARCHAR(100),
    @Culture		NVARCHAR(5),
    @StatusId		NVARCHAR(20),

    @Username		NVARCHAR(256),

    @Password		NVARCHAR(128),
    @PasswordFormat	INT,
    @PasswordHashAlgorithm		INT,
    @PasswordSalt	NVARCHAR(128),
    @Permissions	NVARCHAR(128)
AS
BEGIN
	MERGE INTO [Core].[Entity] [Target]
    USING 
    (
        VALUES   
        (
	        @UserId,

            @Name,
            @Url,
            @Description,

            @Type,
            @Culture,
            @StatusId
        )
    ) 
    AS [Source]
    (
        [EntityId]
		,[Name]
		,[Url]
		,[Description]

		,[Type]
		,[Culture]
		,[StatusId]
    ) 
    ON [Target].[EntityId] = [Source].[EntityId]
    WHEN MATCHED THEN
        UPDATE SET
            [Target].[Name]=ISNULL([Source].[Name],[Target].[Name]),

            [Target].[Url]=ISNULL([Source].[Url],[Target].[Url]),
            [Target].[Description]=ISNULL([Source].[Description],[Target].[Description]),
            [Target].[Type]=ISNULL([Source].[Type],[Target].[Type]),
            [Target].[Culture]=ISNULL([Source].[Culture],[Target].[Culture]),
            [Target].[StatusId]=ISNULL([Source].[StatusId],[Target].[StatusId])
    WHEN NOT MATCHED THEN
	    INSERT 
        (
            [EntityId]
		    ,[Name]
		    ,[Url]
		    ,[Description]

		    ,[Type]
		    ,[Culture]
		    ,[StatusId]
        )
	    VALUES 
        (
            [Source].[EntityId]
		    ,[Source].[Name]
		    ,[Source].[Url]
		    ,[Source].[Description]

		    ,[Source].[Type]
		    ,[Source].[Culture]
		    ,[Source].[StatusId]
	    );

	MERGE INTO [Access].[User] [Target]
    USING 
    (
        VALUES   
        (
            @UserId,
            @Username,
            @Password,
            @PasswordFormat,
            @PasswordHashAlgorithm,
            @PasswordSalt,
            @Permissions
	    )
    ) 
    AS [Source]
    (
        [UserId]
		,[Username]

		,[Password]
		,[PasswordFormat]
		,[PasswordHashAlgorithm]
		,[PasswordSalt]
        ,[Permissions]
    )
    ON [Target].[UserId] = [Source].[UserId]
    WHEN MATCHED THEN
        UPDATE SET
            [Target].[Username]=ISNULL([Source].[Username],[Target].[Username]),

            [Target].[Password]                 =ISNULL([Source].[Password],[Target].[Password]),
            [Target].[PasswordFormat]           =ISNULL([Source].[PasswordFormat],[Target].[PasswordFormat]),
            [Target].[PasswordHashAlgorithm]    =ISNULL([Source].[PasswordHashAlgorithm],[Target].[PasswordHashAlgorithm]),
            [Target].[PasswordSalt]             =ISNULL([Source].[PasswordSalt],[Target].[PasswordSalt]),
            [Target].[Permissions]              =ISNULL([Source].[Permissions],[Target].[Permissions])
    WHEN NOT MATCHED THEN
	    INSERT 
        (
            [UserId]
            ,[Username]
		    ,[Password]
		    ,[PasswordFormat]
		    ,[PasswordHashAlgorithm]
		    ,[PasswordSalt]
            ,[Permissions]
        )
	    VALUES 
        (
            [Source].[UserId]
            ,[Source].[Username]
		    ,[Source].[Password]
		    ,[Source].[PasswordFormat]
		    ,[Source].[PasswordHashAlgorithm]
		    ,[Source].[PasswordSalt]
            ,[Source].[Permissions]
	    );

    EXEC [Access].[GetUser] @UserId, @Username, 1, 1;

END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd454afec-f260-4a87-926a-364a61348ed8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d454afec-f260-4a87-926a-364a61348ed8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fc4101ef-32ad-4750-b2be-83e4dfd97fbb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fc4101ef-32ad-4750-b2be-83e4dfd97fbb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8e8af2c0-e38d-4aa2-8b9d-6d438922aaaf')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8e8af2c0-e38d-4aa2-8b9d-6d438922aaaf')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4e73f4bd-855e-4b38-a3c9-add0b90b9801')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4e73f4bd-855e-4b38-a3c9-add0b90b9801')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fdbb0a7c-0b4a-48a3-b059-655ed6e978fa')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fdbb0a7c-0b4a-48a3-b059-655ed6e978fa')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '489bc92b-c7be-430c-8e3c-cd1bbb42eb82')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('489bc92b-c7be-430c-8e3c-cd1bbb42eb82')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
