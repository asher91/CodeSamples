/*
Deployment script for Providers.Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Providers.Database"
:setvar DefaultFilePrefix "Providers.Database"
:setvar DefaultDataPath "C:\Users\Shayne\AppData\Local\Microsoft\VisualStudio\SSDT\HCorp"
:setvar DefaultLogPath "C:\Users\Shayne\AppData\Local\Microsoft\VisualStudio\SSDT\HCorp"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [Access].[User].[Email] is being dropped, data loss could occur.

The column [Access].[User].[UserId] on table [Access].[User] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [Access].[User])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [Core].[Entity].[LoweredName] is being dropped, data loss could occur.

The column [Core].[Entity].[Url] on table [Core].[Entity] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column Type in table [Core].[Entity] is currently  NVARCHAR (100) NOT NULL but is being changed to  NVARCHAR (20) NOT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [Core].[Entity])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column Type in table [Core].[Status] is currently  NVARCHAR (100) NOT NULL but is being changed to  NVARCHAR (20) NOT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [Core].[Status])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column Type in table [Core].[StatusDetails] is currently  NVARCHAR (100) NOT NULL but is being changed to  NVARCHAR (20) NOT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [Core].[StatusDetails])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'The following operation was generated from a refactoring log file fdbb0a7c-0b4a-48a3-b059-655ed6e978fa, 489bc92b-c7be-430c-8e3c-cd1bbb42eb82';

PRINT N'Rename [Access].[User].[UserId] to UserName';


GO
EXECUTE sp_rename @objname = N'[Access].[User].[UserId]', @newname = N'UserName', @objtype = N'COLUMN';


GO
PRINT N'Dropping [Access].[DF_AccessUser_PasswordFormat]...';


GO
ALTER TABLE [Access].[User] DROP CONSTRAINT [DF_AccessUser_PasswordFormat];


GO
PRINT N'Dropping [Access].[DF_AccessUser_PasswordHashAlgorith]...';


GO
ALTER TABLE [Access].[User] DROP CONSTRAINT [DF_AccessUser_PasswordHashAlgorith];


GO
PRINT N'Dropping [Core].[DF_CoreEntity_StatusId]...';


GO
ALTER TABLE [Core].[Entity] DROP CONSTRAINT [DF_CoreEntity_StatusId];


GO
PRINT N'Dropping [Access].[FK_AccessUser_UserId]...';


GO
ALTER TABLE [Access].[User] DROP CONSTRAINT [FK_AccessUser_UserId];


GO
PRINT N'Dropping [Core].[FK_EntityLink_EntityId]...';


GO
ALTER TABLE [Core].[EntityLink] DROP CONSTRAINT [FK_EntityLink_EntityId];


GO
PRINT N'Dropping [Core].[FK_EntityLink_ParentEntityId]...';


GO
ALTER TABLE [Core].[EntityLink] DROP CONSTRAINT [FK_EntityLink_ParentEntityId];


GO
PRINT N'Dropping [Core].[FK_CoreEntity_StatusId_Type]...';


GO
ALTER TABLE [Core].[Entity] DROP CONSTRAINT [FK_CoreEntity_StatusId_Type];


GO
PRINT N'Dropping [Core].[FK_CoreEntity_Culture]...';


GO
ALTER TABLE [Core].[Entity] DROP CONSTRAINT [FK_CoreEntity_Culture];


GO
PRINT N'Dropping [User].[FK_UserContact_ProfileId]...';


GO
ALTER TABLE [User].[Contact] DROP CONSTRAINT [FK_UserContact_ProfileId];


GO
PRINT N'Dropping [User].[FK_UserProfile_ProfileId_Type]...';


GO
ALTER TABLE [User].[Profile] DROP CONSTRAINT [FK_UserProfile_ProfileId_Type];


GO
PRINT N'Dropping [Core].[FK_EntityLink_StatusId_Type]...';


GO
ALTER TABLE [Core].[EntityLink] DROP CONSTRAINT [FK_EntityLink_StatusId_Type];


GO
PRINT N'Dropping [Core].[FK_StatusDetails_StatusId_Type]...';


GO
ALTER TABLE [Core].[StatusDetails] DROP CONSTRAINT [FK_StatusDetails_StatusId_Type];


GO
PRINT N'Dropping [Core].[FK_CoreStatus_Type]...';


GO
ALTER TABLE [Core].[Status] DROP CONSTRAINT [FK_CoreStatus_Type];


GO
PRINT N'Dropping [Core].[FK_StatusDetails_Culture]...';


GO
ALTER TABLE [Core].[StatusDetails] DROP CONSTRAINT [FK_StatusDetails_Culture];


GO
PRINT N'Dropping [Access].[UQ_AccessUser_Email]...';


GO
ALTER TABLE [Access].[User] DROP CONSTRAINT [UQ_AccessUser_Email];


GO
PRINT N'Creating [Entity]...';


GO
CREATE SCHEMA [Entity]
    AUTHORIZATION [dbo];


GO
PRINT N'Starting rebuilding table [Access].[User]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Access].[tmp_ms_xx_User] (
    [UserId]                UNIQUEIDENTIFIER NOT NULL,
    [Username]              NVARCHAR (256)   NOT NULL,
    [Password]              NVARCHAR (128)   NOT NULL,
    [PasswordFormat]        INT              CONSTRAINT [DF_AccessUser_PasswordFormat] DEFAULT (0) NOT NULL,
    [PasswordHashAlgorithm] INT              CONSTRAINT [DF_AccessUser_PasswordHashAlgorith] DEFAULT (0) NOT NULL,
    [PasswordSalt]          NVARCHAR (128)   NULL,
    [Permissions]           NTEXT            NULL,
    [Avatar]                NTEXT            NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_AccessUser_UserId1] PRIMARY KEY CLUSTERED ([UserId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ_AccessUser_Username1] UNIQUE NONCLUSTERED ([Username] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Access].[User])
    BEGIN
        INSERT INTO [Access].[tmp_ms_xx_User] ([UserName], [Password], [PasswordFormat], [PasswordHashAlgorithm], [PasswordSalt])
        SELECT [UserName],
               [Password],
               [PasswordFormat],
               [PasswordHashAlgorithm],
               [PasswordSalt]
        FROM   [Access].[User];
    END

DROP TABLE [Access].[User];

EXECUTE sp_rename N'[Access].[tmp_ms_xx_User]', N'User';

EXECUTE sp_rename N'[Access].[tmp_ms_xx_constraint_PK_AccessUser_UserId1]', N'PK_AccessUser_UserId', N'OBJECT';

EXECUTE sp_rename N'[Access].[tmp_ms_xx_constraint_UQ_AccessUser_Username1]', N'UQ_AccessUser_Username', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [Core].[Entity]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Core].[tmp_ms_xx_Entity] (
    [EntityId]    UNIQUEIDENTIFIER NOT NULL,
    [Name]        NVARCHAR (256)   NOT NULL,
    [Url]         NVARCHAR (256)   NOT NULL,
    [Description] NVARCHAR (MAX)   NOT NULL,
    [Type]        NVARCHAR (20)    NOT NULL,
    [Culture]     NVARCHAR (5)     NULL,
    [StatusId]    NVARCHAR (20)    CONSTRAINT [DF_CoreEntity_StatusId] DEFAULT 'HOLD' NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_CoreEntity_EntityId1] PRIMARY KEY CLUSTERED ([EntityId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ_CoreEntity_EntityId_Type1] UNIQUE NONCLUSTERED ([EntityId] ASC, [Type] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ_CoreEntity_Url1] UNIQUE NONCLUSTERED ([Url] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Core].[Entity])
    BEGIN
        INSERT INTO [Core].[tmp_ms_xx_Entity] ([EntityId], [Name], [Description], [StatusId], [Type], [Culture])
        SELECT   [EntityId],
                 [Name],
                 [Description],
                 [StatusId],
                 [Type],
                 [Culture]
        FROM     [Core].[Entity]
        ORDER BY [EntityId] ASC;
    END

DROP TABLE [Core].[Entity];

EXECUTE sp_rename N'[Core].[tmp_ms_xx_Entity]', N'Entity';

EXECUTE sp_rename N'[Core].[tmp_ms_xx_constraint_PK_CoreEntity_EntityId1]', N'PK_CoreEntity_EntityId', N'OBJECT';

EXECUTE sp_rename N'[Core].[tmp_ms_xx_constraint_UQ_CoreEntity_EntityId_Type1]', N'UQ_CoreEntity_EntityId_Type', N'OBJECT';

EXECUTE sp_rename N'[Core].[tmp_ms_xx_constraint_UQ_CoreEntity_Url1]', N'UQ_CoreEntity_Url', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [Core].[Status]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Core].[tmp_ms_xx_Status] (
    [StatusId] NVARCHAR (20) NOT NULL,
    [Type]     NVARCHAR (20) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_CoreStatus_StatusId_Type1] PRIMARY KEY CLUSTERED ([StatusId] ASC, [Type] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Core].[Status])
    BEGIN
        INSERT INTO [Core].[tmp_ms_xx_Status] ([StatusId], [Type])
        SELECT   [StatusId],
                 [Type]
        FROM     [Core].[Status]
        ORDER BY [StatusId] ASC, [Type] ASC;
    END

DROP TABLE [Core].[Status];

EXECUTE sp_rename N'[Core].[tmp_ms_xx_Status]', N'Status';

EXECUTE sp_rename N'[Core].[tmp_ms_xx_constraint_PK_CoreStatus_StatusId_Type1]', N'PK_CoreStatus_StatusId_Type', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [Core].[StatusDetails]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [Core].[tmp_ms_xx_StatusDetails] (
    [StatusId]    NVARCHAR (20) NOT NULL,
    [Type]        NVARCHAR (20) NOT NULL,
    [Culture]     NVARCHAR (5)  NOT NULL,
    [Name]        NVARCHAR (20) NOT NULL,
    [Description] NVARCHAR (50) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_StatusDetails_StatusId_Type_Culture1] PRIMARY KEY CLUSTERED ([StatusId] ASC, [Type] ASC, [Culture] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [Core].[StatusDetails])
    BEGIN
        INSERT INTO [Core].[tmp_ms_xx_StatusDetails] ([StatusId], [Type], [Culture], [Name], [Description])
        SELECT   [StatusId],
                 [Type],
                 [Culture],
                 [Name],
                 [Description]
        FROM     [Core].[StatusDetails]
        ORDER BY [StatusId] ASC, [Type] ASC, [Culture] ASC;
    END

DROP TABLE [Core].[StatusDetails];

EXECUTE sp_rename N'[Core].[tmp_ms_xx_StatusDetails]', N'StatusDetails';

EXECUTE sp_rename N'[Core].[tmp_ms_xx_constraint_PK_StatusDetails_StatusId_Type_Culture1]', N'PK_StatusDetails_StatusId_Type_Culture', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [Entity].[TypeDetails]...';


GO
CREATE TABLE [Entity].[TypeDetails] (
    [Type]        NVARCHAR (20) NOT NULL,
    [Culture]     NVARCHAR (5)  NOT NULL,
    [Name]        NVARCHAR (20) NOT NULL,
    [Description] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_EntityTypeDetails_Type_Culture] PRIMARY KEY CLUSTERED ([Type] ASC, [Culture] ASC)
);


GO
PRINT N'Creating [Entity].[Type]...';


GO
CREATE TABLE [Entity].[Type] (
    [Group] NVARCHAR (20) NOT NULL,
    [Type]  NVARCHAR (20) NOT NULL,
    CONSTRAINT [PK_EntityType_Type] PRIMARY KEY CLUSTERED ([Type] ASC)
);


GO
PRINT N'Creating [Entity].[Link]...';


GO
CREATE TABLE [Entity].[Link] (
    [EntityId]       UNIQUEIDENTIFIER NOT NULL,
    [ParentEntityId] UNIQUEIDENTIFIER NOT NULL,
    [StatusId]       NVARCHAR (20)    NOT NULL,
    [Type]           NVARCHAR (20)    NOT NULL,
    [Level]          INT              NOT NULL,
    CONSTRAINT [PK_EntityLink_EntityId_ParentEntityId] PRIMARY KEY CLUSTERED ([EntityId] ASC, [ParentEntityId] ASC)
);


GO
PRINT N'Creating [Access].[Roles]...';


GO
CREATE TABLE [Access].[Roles] (
    [Role]        NVARCHAR (25)    NOT NULL,
    [SectionId]   UNIQUEIDENTIFIER NOT NULL,
    [Description] NVARCHAR (256)   NULL,
    CONSTRAINT [PK_AccessRoles_Role] PRIMARY KEY NONCLUSTERED ([Role] ASC)
);


GO
PRINT N'Creating [Entity].[DF_EntityLink_StatusId]...';


GO
ALTER TABLE [Entity].[Link]
    ADD CONSTRAINT [DF_EntityLink_StatusId] DEFAULT 'HOLD' FOR [StatusId];


GO
PRINT N'Creating [Entity].[DF_EntityLink_Level]...';


GO
ALTER TABLE [Entity].[Link]
    ADD CONSTRAINT [DF_EntityLink_Level] DEFAULT 1 FOR [Level];


GO
PRINT N'Creating [Access].[FK_AccessUser_UserId]...';


GO
ALTER TABLE [Access].[User] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessUser_UserId] FOREIGN KEY ([UserId]) REFERENCES [Core].[Entity] ([EntityId]);


GO
PRINT N'Creating [Core].[FK_CoreEntity_StatusId_Type]...';


GO
ALTER TABLE [Core].[Entity] WITH NOCHECK
    ADD CONSTRAINT [FK_CoreEntity_StatusId_Type] FOREIGN KEY ([StatusId], [Type]) REFERENCES [Core].[Status] ([StatusId], [Type]);


GO
PRINT N'Creating [Core].[FK_CoreEntity_Culture]...';


GO
ALTER TABLE [Core].[Entity] WITH NOCHECK
    ADD CONSTRAINT [FK_CoreEntity_Culture] FOREIGN KEY ([Culture]) REFERENCES [Core].[Culture] ([Culture]);


GO
PRINT N'Creating [Core].[FK_StatusDetails_StatusId_Type]...';


GO
ALTER TABLE [Core].[StatusDetails] WITH NOCHECK
    ADD CONSTRAINT [FK_StatusDetails_StatusId_Type] FOREIGN KEY ([StatusId], [Type]) REFERENCES [Core].[Status] ([StatusId], [Type]);


GO
PRINT N'Creating [Core].[FK_CoreStatus_Type]...';


GO
ALTER TABLE [Core].[Status] WITH NOCHECK
    ADD CONSTRAINT [FK_CoreStatus_Type] FOREIGN KEY ([Type]) REFERENCES [Entity].[Type] ([Type]);


GO
PRINT N'Creating [Core].[FK_StatusDetails_Culture]...';


GO
ALTER TABLE [Core].[StatusDetails] WITH NOCHECK
    ADD CONSTRAINT [FK_StatusDetails_Culture] FOREIGN KEY ([Culture]) REFERENCES [Core].[Culture] ([Culture]);


GO
PRINT N'Creating [Entity].[FK_EntityTypeDetails_Type]...';


GO
ALTER TABLE [Entity].[TypeDetails] WITH NOCHECK
    ADD CONSTRAINT [FK_EntityTypeDetails_Type] FOREIGN KEY ([Type]) REFERENCES [Entity].[Type] ([Type]);


GO
PRINT N'Creating [Entity].[FK_EntityTypeDetails_Culture]...';


GO
ALTER TABLE [Entity].[TypeDetails] WITH NOCHECK
    ADD CONSTRAINT [FK_EntityTypeDetails_Culture] FOREIGN KEY ([Culture]) REFERENCES [Core].[Culture] ([Culture]);


GO
PRINT N'Creating [Entity].[FK_EntityLink_EntityId]...';


GO
ALTER TABLE [Entity].[Link] WITH NOCHECK
    ADD CONSTRAINT [FK_EntityLink_EntityId] FOREIGN KEY ([EntityId]) REFERENCES [Core].[Entity] ([EntityId]);


GO
PRINT N'Creating [Entity].[FK_EntityLink_ParentEntityId]...';


GO
ALTER TABLE [Entity].[Link] WITH NOCHECK
    ADD CONSTRAINT [FK_EntityLink_ParentEntityId] FOREIGN KEY ([ParentEntityId]) REFERENCES [Core].[Entity] ([EntityId]);


GO
PRINT N'Creating [Entity].[FK_EntityLink_StatusId_Type]...';


GO
ALTER TABLE [Entity].[Link] WITH NOCHECK
    ADD CONSTRAINT [FK_EntityLink_StatusId_Type] FOREIGN KEY ([StatusId], [Type]) REFERENCES [Core].[Status] ([StatusId], [Type]);


GO
PRINT N'Creating [Access].[FK_AccessRoles_SectionId]...';


GO
ALTER TABLE [Access].[Roles] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRoles_SectionId] FOREIGN KEY ([SectionId]) REFERENCES [Core].[Entity] ([EntityId]);


GO
PRINT N'Altering [Access].[GetUser]...';


GO
ALTER PROCEDURE [Access].[GetUser]
	@UserId		UNIQUEIDENTIFIER,
	@Username	[NVARCHAR](256),
	
	@Page				INT = 1,
	@PageSize			INT = 10000
AS        
BEGIN
	SELECT 
		[E].[EntityId][UserId]
		,[E].[Name]
		,[E].[Url]
		,[E].[Description]
		,[E].[Type]
		,[E].[Culture]

		,[SD].[StatusId]
		,[SD].[Name] [StatusName]
		,[SD].[Description] [StatusDescription]

		,[U].[Username]
		,[U].[Password]
		,[U].[PasswordFormat]
		,[U].[PasswordHashAlgorithm]
		,[U].[PasswordSalt]
		,[U].[Permissions]

		,[U].[Avatar]
	FROM [Access].[User] [U]
		INNER JOIN [Core].[Entity] [E]
			ON [UserId] = ISNULL(@UserId, [UserId]) 
				AND [Username] = ISNULL(@Username, [Username])
				AND [U].[UserId] = [E].[EntityId]
		INNER JOIN [Core].[StatusDetails] [SD]
			ON [SD].[StatusId] = [E].[StatusId]
				AND [SD].[Type] = [E].[Type]
				AND [SD].[Culture] = [E].[Culture]
	ORDER BY [Username]
	OFFSET ((@Page - 1) * @PageSize) ROWS
	FETCH NEXT @PageSize ROWS ONLY;
	
	IF (@@ROWCOUNT = 0) -- User not found
       RETURN -1

    RETURN 0
END
GO
PRINT N'Altering [Access].[SetUser]...';


GO
ALTER PROCEDURE [Access].[SetUser]
    @UserId			UNIQUEIDENTIFIER,

    @Name			NVARCHAR(256),
    @Url		    NVARCHAR(256),
    @Description	NVARCHAR(MAX),

    @Type			NVARCHAR(100),
    @Culture		NVARCHAR(5),
    @StatusId		NVARCHAR(20),

    @Username		NVARCHAR(256),

    @Password		NVARCHAR(128),
    @PasswordFormat	INT,
    @PasswordHashAlgorithm		INT,
    @PasswordSalt	NVARCHAR(128),
    @Permissions	NVARCHAR(128)
AS
BEGIN
	MERGE INTO [Core].[Entity] [Target]
    USING 
    (
        VALUES   
        (
	        @UserId,

            @Name,
            @Url,
            @Description,

            @Type,
            @Culture,
            @StatusId
        )
    ) 
    AS [Source]
    (
        [EntityId]
		,[Name]
		,[Url]
		,[Description]

		,[Type]
		,[Culture]
		,[StatusId]
    ) 
    ON [Target].[EntityId] = [Source].[EntityId]
    WHEN MATCHED THEN
        UPDATE SET
            [Target].[Name]=ISNULL([Source].[Name],[Target].[Name]),

            [Target].[Url]=ISNULL([Source].[Url],[Target].[Url]),
            [Target].[Description]=ISNULL([Source].[Description],[Target].[Description]),
            [Target].[Type]=ISNULL([Source].[Type],[Target].[Type]),
            [Target].[Culture]=ISNULL([Source].[Culture],[Target].[Culture]),
            [Target].[StatusId]=ISNULL([Source].[StatusId],[Target].[StatusId])
    WHEN NOT MATCHED THEN
	    INSERT 
        (
            [EntityId]
		    ,[Name]
		    ,[Url]
		    ,[Description]

		    ,[Type]
		    ,[Culture]
		    ,[StatusId]
        )
	    VALUES 
        (
            [Source].[EntityId]
		    ,[Source].[Name]
		    ,[Source].[Url]
		    ,[Source].[Description]

		    ,[Source].[Type]
		    ,[Source].[Culture]
		    ,[Source].[StatusId]
	    );

	MERGE INTO [Access].[User] [Target]
    USING 
    (
        VALUES   
        (
            @UserId,
            @Username,
            @Password,
            @PasswordFormat,
            @PasswordHashAlgorithm,
            @PasswordSalt,
            @Permissions
	    )
    ) 
    AS [Source]
    (
        [UserId]
		,[Username]

		,[Password]
		,[PasswordFormat]
		,[PasswordHashAlgorithm]
		,[PasswordSalt]
        ,[Permissions]
    )
    ON [Target].[UserId] = [Source].[UserId]
    WHEN MATCHED THEN
        UPDATE SET
            [Target].[Username]=ISNULL([Source].[Username],[Target].[Username]),

            [Target].[Password]                 =ISNULL([Source].[Password],[Target].[Password]),
            [Target].[PasswordFormat]           =ISNULL([Source].[PasswordFormat],[Target].[PasswordFormat]),
            [Target].[PasswordHashAlgorithm]    =ISNULL([Source].[PasswordHashAlgorithm],[Target].[PasswordHashAlgorithm]),
            [Target].[PasswordSalt]             =ISNULL([Source].[PasswordSalt],[Target].[PasswordSalt]),
            [Target].[Permissions]              =ISNULL([Source].[Permissions],[Target].[Permissions])
    WHEN NOT MATCHED THEN
	    INSERT 
        (
            [UserId]
            ,[Username]
		    ,[Password]
		    ,[PasswordFormat]
		    ,[PasswordHashAlgorithm]
		    ,[PasswordSalt]
            ,[Permissions]
        )
	    VALUES 
        (
            [Source].[UserId]
            ,[Source].[Username]
		    ,[Source].[Password]
		    ,[Source].[PasswordFormat]
		    ,[Source].[PasswordHashAlgorithm]
		    ,[Source].[PasswordSalt]
            ,[Source].[Permissions]
	    );

    EXEC [Access].[GetUser] @UserId, @Username, 1, 1;

END
GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fdbb0a7c-0b4a-48a3-b059-655ed6e978fa')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fdbb0a7c-0b4a-48a3-b059-655ed6e978fa')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '489bc92b-c7be-430c-8e3c-cd1bbb42eb82')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('489bc92b-c7be-430c-8e3c-cd1bbb42eb82')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [Access].[User] WITH CHECK CHECK CONSTRAINT [FK_AccessUser_UserId];

ALTER TABLE [Core].[Entity] WITH CHECK CHECK CONSTRAINT [FK_CoreEntity_StatusId_Type];

ALTER TABLE [Core].[Entity] WITH CHECK CHECK CONSTRAINT [FK_CoreEntity_Culture];

ALTER TABLE [Core].[StatusDetails] WITH CHECK CHECK CONSTRAINT [FK_StatusDetails_StatusId_Type];

ALTER TABLE [Core].[Status] WITH CHECK CHECK CONSTRAINT [FK_CoreStatus_Type];

ALTER TABLE [Core].[StatusDetails] WITH CHECK CHECK CONSTRAINT [FK_StatusDetails_Culture];

ALTER TABLE [Entity].[TypeDetails] WITH CHECK CHECK CONSTRAINT [FK_EntityTypeDetails_Type];

ALTER TABLE [Entity].[TypeDetails] WITH CHECK CHECK CONSTRAINT [FK_EntityTypeDetails_Culture];

ALTER TABLE [Entity].[Link] WITH CHECK CHECK CONSTRAINT [FK_EntityLink_EntityId];

ALTER TABLE [Entity].[Link] WITH CHECK CHECK CONSTRAINT [FK_EntityLink_ParentEntityId];

ALTER TABLE [Entity].[Link] WITH CHECK CHECK CONSTRAINT [FK_EntityLink_StatusId_Type];

ALTER TABLE [Access].[Roles] WITH CHECK CHECK CONSTRAINT [FK_AccessRoles_SectionId];


GO
PRINT N'Update complete.';


GO
